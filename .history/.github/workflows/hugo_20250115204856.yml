name: Hugo PaperMod Deploy

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'  # 每天 2 点触发
  workflow_dispatch:      # 手动触发

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出仓库代码
      - name: Check out
        uses: actions/checkout@v3

      # 2. 安装 Hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'

      # 3. 生成 content 文件夹，并为除 README.md 外的所有 Markdown 文件添加 Front Matter
      - name: Prepare content
        run: |
          # 如果已有 content 文件夹，先删除，保证干净的构建环境
          rm -rf content
          mkdir -p content

          # 处理顶层的目录和文件（排除 .github、content、.git、README.md、.gitignore 等）
          for item in $(ls -A); do
            # 跳过指定文件夹或文件
            if [ "$item" = ".github" ] || [ "$item" = "content" ] || [ "$item" = ".git" ] || [ "$item" = "README.md" ] || [ "$item" = ".gitignore" ]; then
              continue
            fi

            # 如果是一个文件且后缀为 .md，则处理它（排除 README.md）
            if [ -f "$item" ] && [[ "$item" == *.md ]]; then
              baseName=$(basename "$item")
              if ! grep -q '^---' "$item"; then
                # 不存在 front matter，则创建
                cat <<EOF > "content/$baseName"
                ---
                title: ${baseName%.md}
                date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
                ---
                EOF
                cat "$item" >> "content/$baseName"
              else
                # 已经有 front matter，直接复制
                cp "$item" "content/$baseName"
              fi
            fi

            # 如果是一个目录，则处理目录下所有 .md 文件
            if [ -d "$item" ]; then
              folderName=$(basename "$item")
              mkdir -p "content/$folderName"
              for mdfile in $(find "$item" -type f -name '*.md' ! -name 'README.md'); do
                baseName=$(basename "$mdfile")
                # 如果没有 front matter 则添加
                if ! grep -q '^---' "$mdfile"; then
                  cat <<EOF > "content/$folderName/$baseName"
                  ---
                  title: ${baseName%.md}
                  date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
                  ---
                  EOF
                  cat "$mdfile" >> "content/$folderName/$baseName"
                else
                  cp "$mdfile" "content/$folderName/$baseName"
                fi
              done
            fi
          done

      # 4. 创建搜索页和归档页（PaperMod 主题自带 search 和 archives 布局）
      - name: Add search and archives pages
        run: |
          mkdir -p content/search
          cat <<EOF > content/search/_index.md
          ---
          title: "Search"
          layout: "search"
          url: "/search/"
          ---
          EOF

          mkdir -p content/archives
          cat <<EOF > content/archives/_index.md
          ---
          title: "Archives"
          layout: "archives"
          url: "/archives/"
          ---
          EOF

      # 5. 创建 Hugo 配置文件（config.yml），启用 PaperMod 主题，添加菜单等
      - name: Create Hugo config
        run: |
          cat <<EOT > config.yml
    baseURL: "https://doc.protomyst.com/"
    title: "Articles"
    languageCode: "zh-cn"
    # 如果你要显示中文时间，可设置为 "zh-cn" 并在 PaperMod config 中做相应调整

    theme: "PaperMod"

    # 不需要生成的页面类型可以禁用
    disableKinds:
      - RSS
      - sitemap
      - taxonomy
      - taxonomyTerm

    # 菜单：主页上显示归档和搜索按钮
    menu:
      main:
        - name: "Archives"
          url: "/archives"
          weight: 1
        - name: "Search"
          url: "/search"
          weight: 2

    # PaperMod 专属配置
    params:
      env: "production"
      # 启用搜索
      enableSearch: true

      # 其他可选设置
      ShowReadingTime: false
      ShowShareButtons: true
      ShowPostNavLinks: true

    # 主题相关配置请参考 PaperMod 文档可自行添加
    EOT

      # 6. 构建 Hugo 站点
      - name: Build with Hugo
        run: |
          hugo --minify

      # 7. 部署到 GitHub Pages
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages  # 部署到 gh-pages 分支，你也可以改为别的分支