name: Deploy Hugo site to Pages

on:
  workflow_run:
    workflows: ["Add YAML Front Matter"]
    types:
      - completed
  workflow_dispatch:
  push:
    branches: ["main"]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.121.1
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Init Hugo Site
        run: |
          # ÂàõÂª∫ Hugo Á´ôÁÇπÈÖçÁΩÆ
          cat > config.toml <<EOL
          baseURL = 'https://protomyst.github.io/Articles/'
          languageCode = 'zh-cn'
          title = 'Articles'
          theme = 'paper'
          
          [params]
            github = 'Protomyst'
            rss = true
            
          [taxonomies]
            category = 'categories'
            tag = 'tags'
            
          [markup.goldmark.renderer]
            unsafe = true
          EOL
          
          # ‰∏ãËΩΩÂπ∂ËÆæÁΩÆ‰∏ªÈ¢ò
          git clone https://github.com/nanxiaobei/hugo-paper themes/paper
          
          # ÂàõÂª∫Ëá™ÂÆö‰πâ‰∏ªÈ°µÊ®°Êùø
          mkdir -p layouts
          cat > layouts/index.html <<EOL
          {{ define "main" }}
          <article class="post-single">
            <header class="post-header">
              <h1 class="post-title">ÊñáÁ´†Ê°£Ê°à</h1>
            </header>
            
            <div class="post-content">
              <!-- ÊåâÊñá‰ª∂Â§πÁªìÊûÑÊòæÁ§∫ÊñáÁ´† -->
              {{ \$pages := .Site.RegularPages }}
              {{ \$sections := slice }}
              {{ range \$pages }}
                {{ \$section := path.Dir .File.Path }}
                {{ if not (in \$sections \$section) }}
                  {{ \$sections = \$sections | append \$section }}
                {{ end }}
              {{ end }}
              
              <div class="folder-structure">
                {{ range sort \$sections }}
                  {{ \$section := . }}
                  <div class="folder">
                    <h2>üìÅ {{ if eq . "posts" }}Ê†πÁõÆÂΩï{{ else }}{{ . }}{{ end }}</h2>
                    <ul>
                      {{ range sort (\$pages.ByDate.Reverse) }}
                        {{ if eq (path.Dir .File.Path) \$section }}
                          <li>
                            <time>{{ .Date.Format "2006-01-02" }}</time>
                            <a href="{{ .Permalink }}">{{ .Title }}</a>
                          </li>
                        {{ end }}
                      {{ end }}
                    </ul>
                  </div>
                {{ end }}
              </div>
              
              <h2>ÊúÄËøëÊõ¥Êñ∞</h2>
              <ul>
                {{ range first 10 (where .Site.RegularPages.ByLastmod.Reverse ".Type" "posts") }}
                <li>
                  <time>{{ .Lastmod.Format "2006-01-02" }}</time>
                  <a href="{{ .Permalink }}">{{ .Title }}</a>
                  <small>({{ path.Dir .File.Path }})</small>
                </li>
                {{ end }}
              </ul>
            </div>
          </article>
          
          <style>
          .folder-structure {
            margin: 2rem 0;
          }
          .folder {
            margin-bottom: 2rem;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 8px;
          }
          .folder h2 {
            margin-top: 0;
            color: #495057;
          }
          .folder ul {
            list-style: none;
            padding-left: 1rem;
          }
          .folder li {
            margin: 0.5rem 0;
            display: flex;
            align-items: baseline;
          }
          .folder time {
            color: #868e96;
            margin-right: 1rem;
            font-family: monospace;
          }
          small {
            color: #868e96;
            margin-left: 0.5rem;
          }
          </style>
          {{ end }}
          EOL
          
          # ÂàõÂª∫ archetypes Ê®°Êùø
          mkdir -p archetypes
          cat > archetypes/default.md <<EOL
          ---
          title: "{{ replace .Name "-" " " | title }}"
          date: {{ .Date }}
          lastmod: {{ .Date }}
          categories: []
          tags: []
          draft: false
          ---
          EOL
          
          # ÂàõÂª∫ÂÜÖÂÆπÁõÆÂΩïÁªìÊûÑ
          mkdir -p content
          
          # ÁßªÂä®Âπ∂ÁªÑÁªá Markdown Êñá‰ª∂
          find . -name "*.md" -not -path "./themes/*" -not -path "./archetypes/*" -not -path "./content/*" -not -path "./layouts/*" | while read file; do
            # Ëé∑ÂèñÁõ∏ÂØπË∑ØÂæÑ
            rel_path=${file#./}
            dir_path=$(dirname "$rel_path")
            
            # Â¶ÇÊûú‰∏çÊòØÂú®Ê†πÁõÆÂΩïÔºåÂàõÂª∫ÂØπÂ∫îÁöÑÂÜÖÂÆπÁõÆÂΩï
            if [ "$dir_path" != "." ]; then
              mkdir -p "content/$dir_path"
              target_path="content/$rel_path"
            else
              target_path="content/posts/$(basename "$rel_path")"
            fi
            
            # ÁßªÂä®Êñá‰ª∂Âπ∂Ê∑ªÂä†/Êõ¥Êñ∞ÂâçÁΩÆÊï∞ÊçÆ
            if [ -f "$file" ]; then
              title=$(basename "$file" .md)
              date=$(git log -1 --format=%aI -- "$file")
              lastmod=$(git log -1 --format=%aI -- "$file")
              
              # Â¶ÇÊûúÊñá‰ª∂Ê≤°Êúâ front matterÔºåÊ∑ªÂä†ÂÆÉ
              if ! grep -q "^---" "$file"; then
                temp_file=$(mktemp)
                echo "---" > "$temp_file"
                echo "title: \"$title\"" >> "$temp_file"
                echo "date: $date" >> "$temp_file"
                echo "lastmod: $lastmod" >> "$temp_file"
                echo "---" >> "$temp_file"
                cat "$file" >> "$temp_file"
                mkdir -p $(dirname "$target_path")
                mv "$temp_file" "$target_path"
              else
                mkdir -p $(dirname "$target_path")
                mv "$file" "$target_path"
              fi
            fi
          done

      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: hugo --gc --minify

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
