name: Deploy Hugo site to Pages

on:
  # 手动触发
  workflow_dispatch:
  # 每天2点触发（使用UTC时间）
  schedule:
    - cron: '0 2 * * *'
  # 推送触发
  push:
    branches: ["main"]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.121.1
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0    # 获取完整的 git 历史用于最后修改时间
      
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Init Hugo Site
        run: |
          # 创建 Hugo 站点配置
          cat > config.toml <<EOL
          baseURL = 'https://doc.protomyst.com/'
          languageCode = 'zh-cn'
          title = 'Articles'
          theme = 'paper'
          
          [params]
            github = 'Protomyst'
            rss = true
            
          [taxonomies]
            category = 'categories'
            tag = 'tags'
            
          [markup.goldmark.renderer]
            unsafe = true
            
          # 启用搜索所需的 JSON 输出
          [outputs]
            home = ["HTML", "RSS", "JSON"]
            section = ["HTML", "RSS"]
            
          # 配置归档
          [permalinks]
            posts = "/posts/:sections/:filename/"
          EOL
          
          # 下载并设置主题
          git clone https://github.com/nanxiaobei/hugo-paper themes/paper
          
          # 创建搜索页面
          mkdir -p layouts/_default
          cat > layouts/_default/search.html <<EOL
          {{ define "main" }}
          <div id="search-container">
            <input type="text" id="search-input" placeholder="搜索文章...">
            <div id="search-results"></div>
          </div>
          <script src="https://cdn.jsdelivr.net/npm/fuse.js@6.6.2"></script>
          <script>
            document.addEventListener('DOMContentLoaded', function() {
              const searchInput = document.getElementById('search-input');
              const searchResults = document.getElementById('search-results');
              
              fetch('/index.json')
                .then(response => response.json())
                .then(data => {
                  const fuse = new Fuse(data, {
                    keys: ['title', 'content', 'tags', 'categories'],
                    threshold: 0.3,
                    includeMatches: true
                  });
                  
                  searchInput.addEventListener('input', () => {
                    const query = searchInput.value;
                    if (query.length >= 2) {
                      const results = fuse.search(query);
                      searchResults.innerHTML = results
                        .map(result => \`
                          <div class="search-result">
                            <a href="\${result.item.permalink}">
                              <h3>\${result.item.title}</h3>
                              <p>\${result.item.summary || ''}</p>
                            </a>
                          </div>
                        \`)
                        .join('');
                    } else {
                      searchResults.innerHTML = '';
                    }
                  });
                });
            });
          </script>
          {{ end }}
          EOL
          
          # 创建 index.json 模板
          cat > layouts/_default/index.json <<EOL
          {{- \$index := slice -}}
          {{- range where .Site.RegularPages "Type" "not in" (slice "page" "archive") -}}
              {{- \$index = \$index | append (dict "title" .Title "permalink" .Permalink "content" .Plain "summary" .Summary "tags" .Params.tags "categories" .Params.categories) -}}
          {{- end -}}
          {{- \$index | jsonify -}}
          EOL
          
          # 创建归档页面模板
          mkdir -p layouts/_default
          cat > layouts/_default/archives.html <<EOL
          {{ define "main" }}
          <h1>归档</h1>
          {{ range .Site.Sections }}
            <h2>{{ .Title }}</h2>
            <ul>
              {{ range .Pages }}
                <li>
                  <span>{{ .Date.Format "2006-01-02" }}</span>
                  <a href="{{ .Permalink }}">{{ .Title }}</a>
                </li>
              {{ end }}
            </ul>
          {{ end }}
          {{ end }}
          EOL
          
          # 创建 archetypes 模板
          mkdir -p archetypes
          cat > archetypes/default.md <<EOL
          ---
          title: "{{ replace .Name "-" " " | title }}"
          date: {{ .Date }}
          categories: []
          tags: []
          draft: false
          ---
          EOL
          
          # 创建内容目录结构
          mkdir -p content/posts
          
          # 移动所有 markdown 文件到对应的文件夹，排除 README.md
          find . -name "*.md" -not -name "README.md" -not -path "./themes/*" -not -path "./archetypes/*" -not -path "./content/*" | while read file; do
            # 获取文件所在目录作为分类
            dir=$(dirname "$file")
            if [ "$dir" = "." ]; then
              dir="uncategorized"
            else
              dir=$(basename "$dir")
            fi
            
            # 创建目标目录
            mkdir -p "content/posts/$dir"
            
            # 移动文件并添加 front matter（如果需要）
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if ! grep -q "^---" "$file"; then
                title=$(basename "$file" .md)
                date=$(git log -1 --format=%aI -- "$file")
                temp_file=$(mktemp)
                echo "---" > "$temp_file"
                echo "title: \"$title\"" >> "$temp_file"
                echo "date: $date" >> "$temp_file"
                echo "categories: [\"$dir\"]" >> "$temp_file"
                echo "---" >> "$temp_file"
                cat "$file" >> "$temp_file"
                mv "$temp_file" "content/posts/$dir/$filename"
              else
                mv "$file" "content/posts/$dir/$filename"
              fi
            fi
          done
          
          # 创建归档入口页面
          cat > content/archives.md <<EOL
          ---
          title: "归档"
          layout: "archives"
          url: "/archives"
          summary: archives
          ---
          EOL

      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: hugo --gc --minify

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
